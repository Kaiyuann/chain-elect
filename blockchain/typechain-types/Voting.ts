/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface VotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addValidTokens"
      | "closePoll"
      | "createPoll"
      | "getResults"
      | "pollCount"
      | "polls"
      | "usedTokens"
      | "validTokens"
      | "vote"
      | "voteCounts"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "PollClosed" | "PollCreated" | "VoteCasted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addValidTokens",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "closePoll",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPoll",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getResults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pollCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "polls", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "usedTokens",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validTokens",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteCounts",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addValidTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closePoll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPoll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getResults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pollCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "polls", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usedTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voteCounts", data: BytesLike): Result;
}

export namespace PollClosedEvent {
  export type InputTuple = [pollId: BigNumberish];
  export type OutputTuple = [pollId: bigint];
  export interface OutputObject {
    pollId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PollCreatedEvent {
  export type InputTuple = [pollId: BigNumberish, creator: AddressLike];
  export type OutputTuple = [pollId: bigint, creator: string];
  export interface OutputObject {
    pollId: bigint;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastedEvent {
  export type InputTuple = [pollId: BigNumberish, optionId: BigNumberish];
  export type OutputTuple = [pollId: bigint, optionId: bigint];
  export interface OutputObject {
    pollId: bigint;
    optionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Voting extends BaseContract {
  connect(runner?: ContractRunner | null): Voting;
  waitForDeployment(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addValidTokens: TypedContractMethod<
    [pollId: BigNumberish, tokenHashes: BytesLike[]],
    [void],
    "nonpayable"
  >;

  closePoll: TypedContractMethod<[pollId: BigNumberish], [void], "nonpayable">;

  createPoll: TypedContractMethod<
    [allowLiveResults: boolean, optionCount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getResults: TypedContractMethod<[pollId: BigNumberish], [bigint[]], "view">;

  pollCount: TypedContractMethod<[], [bigint], "view">;

  polls: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, boolean, boolean, bigint] & {
        creator: string;
        allowLiveResults: boolean;
        isActive: boolean;
        optionCount: bigint;
      }
    ],
    "view"
  >;

  usedTokens: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [boolean],
    "view"
  >;

  validTokens: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [boolean],
    "view"
  >;

  vote: TypedContractMethod<
    [pollId: BigNumberish, rawToken: string, optionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  voteCounts: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addValidTokens"
  ): TypedContractMethod<
    [pollId: BigNumberish, tokenHashes: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "closePoll"
  ): TypedContractMethod<[pollId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createPoll"
  ): TypedContractMethod<
    [allowLiveResults: boolean, optionCount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getResults"
  ): TypedContractMethod<[pollId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "pollCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "polls"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, boolean, boolean, bigint] & {
        creator: string;
        allowLiveResults: boolean;
        isActive: boolean;
        optionCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "usedTokens"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "validTokens"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [pollId: BigNumberish, rawToken: string, optionId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voteCounts"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "PollClosed"
  ): TypedContractEvent<
    PollClosedEvent.InputTuple,
    PollClosedEvent.OutputTuple,
    PollClosedEvent.OutputObject
  >;
  getEvent(
    key: "PollCreated"
  ): TypedContractEvent<
    PollCreatedEvent.InputTuple,
    PollCreatedEvent.OutputTuple,
    PollCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCasted"
  ): TypedContractEvent<
    VoteCastedEvent.InputTuple,
    VoteCastedEvent.OutputTuple,
    VoteCastedEvent.OutputObject
  >;

  filters: {
    "PollClosed(uint256)": TypedContractEvent<
      PollClosedEvent.InputTuple,
      PollClosedEvent.OutputTuple,
      PollClosedEvent.OutputObject
    >;
    PollClosed: TypedContractEvent<
      PollClosedEvent.InputTuple,
      PollClosedEvent.OutputTuple,
      PollClosedEvent.OutputObject
    >;

    "PollCreated(uint256,address)": TypedContractEvent<
      PollCreatedEvent.InputTuple,
      PollCreatedEvent.OutputTuple,
      PollCreatedEvent.OutputObject
    >;
    PollCreated: TypedContractEvent<
      PollCreatedEvent.InputTuple,
      PollCreatedEvent.OutputTuple,
      PollCreatedEvent.OutputObject
    >;

    "VoteCasted(uint256,uint256)": TypedContractEvent<
      VoteCastedEvent.InputTuple,
      VoteCastedEvent.OutputTuple,
      VoteCastedEvent.OutputObject
    >;
    VoteCasted: TypedContractEvent<
      VoteCastedEvent.InputTuple,
      VoteCastedEvent.OutputTuple,
      VoteCastedEvent.OutputObject
    >;
  };
}
